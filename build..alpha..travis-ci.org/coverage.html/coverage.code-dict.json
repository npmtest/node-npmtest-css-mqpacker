{"/home/travis/build/npmtest/node-npmtest-css-mqpacker/test.js":"/* istanbul instrument in package npmtest_css_mqpacker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-css-mqpacker/lib.npmtest_css_mqpacker.js":"/* istanbul instrument in package npmtest_css_mqpacker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_css_mqpacker = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_css_mqpacker = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-css-mqpacker/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-css-mqpacker && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_css_mqpacker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_css_mqpacker\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_css_mqpacker.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_css_mqpacker.rollup.js'] =\n            local.assetsDict['/assets.npmtest_css_mqpacker.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_css_mqpacker.__dirname + '/lib.npmtest_css_mqpacker.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-css-mqpacker/node_modules/css-mqpacker/index.js":"\"use strict\";\n\nvar list = require(\"postcss/lib/list\");\nvar pkg = require(\"./package.json\");\nvar postcss = require(\"postcss\");\n\nvar isSourceMapAnnotation = function (rule) {\n  if (!rule) {\n    return false;\n  }\n\n  if (rule.type !== \"comment\") {\n    return false;\n  }\n\n  if (rule.text.toLowerCase().indexOf(\"# sourcemappingurl=\") !== 0) {\n    return false;\n  }\n\n  return true;\n};\n\nvar parseQueryList = function (queryList) {\n  var queries = [];\n  list.comma(queryList).forEach(function (query) {\n    var expressions = {};\n    list.space(query).forEach(function (expression) {\n      var feature;\n      var value;\n      expression = expression.toLowerCase();\n\n      if (expression === \"and\") {\n        return;\n      }\n\n      if (/^\\w+$/.test(expression)) {\n        expressions[expression] = true;\n\n        return;\n      }\n\n      expression = list.split(expression.replace(/^\\(|\\)$/g, \"\"), [\":\"]);\n      feature = expression[0];\n      value = expression[1];\n\n      if (!expressions[feature]) {\n        expressions[feature] = [];\n      }\n\n      expressions[feature].push(value);\n    });\n    queries.push(expressions);\n  });\n\n  return queries;\n};\n\nvar inspectLength = function (length) {\n  var num;\n  var unit;\n  length = /(-?\\d*\\.?\\d+)(ch|em|ex|px|rem)/.exec(length);\n\n  if (!length) {\n    return Number.MAX_VALUE;\n  }\n\n  num = length[1];\n  unit = length[2];\n\n  switch (unit) {\n  case \"ch\":\n    num = parseFloat(num) * 8.8984375;\n\n    break;\n\n  case \"em\":\n  case \"rem\":\n    num = parseFloat(num) * 16;\n\n    break;\n\n  case \"ex\":\n    num = parseFloat(num) * 8.296875;\n\n    break;\n\n  case \"px\":\n    num = parseFloat(num);\n\n    break;\n  }\n\n  return num;\n};\n\nvar pickMinimumMinWidth = function (expressions) {\n  var minWidths = [];\n  expressions.forEach(function (feature) {\n    var minWidth = feature[\"min-width\"];\n\n    if (!minWidth || feature.not || feature.print) {\n      minWidth = [null];\n    }\n\n    minWidths.push(minWidth.map(inspectLength).sort(function (a, b) {\n      return b - a;\n    })[0]);\n  });\n\n  return minWidths.sort(function (a, b) {\n    return a - b;\n  })[0];\n};\n\nvar sortQueryLists = function (queryLists, sort) {\n  var mapQueryLists = [];\n\n  if (!sort) {\n    return queryLists;\n  }\n\n  if (typeof sort === \"function\") {\n    return queryLists.sort(sort);\n  }\n\n  queryLists.forEach(function (queryList) {\n    mapQueryLists.push(parseQueryList(queryList));\n  });\n\n  return mapQueryLists.map(function (e, i) {\n    return {\n      index: i,\n      value: pickMinimumMinWidth(e)\n    };\n  }).sort(function (a, b) {\n    return a.value - b.value;\n  }).map(function (e) {\n    return queryLists[e.index];\n  });\n};\n\nmodule.exports = postcss.plugin(pkg.name, function (opts) {\n  if (!opts) {\n    opts = {};\n  }\n\n  if (!opts.sort) {\n    opts.sort = false;\n  }\n\n  return function (css) {\n    var queries = {};\n    var queryLists = [];\n    var sourceMap = css.last;\n\n    if (!isSourceMapAnnotation(sourceMap)) {\n      sourceMap = null;\n    }\n\n    css.walkAtRules(\"media\", function (atRule) {\n      var past;\n      var queryList = atRule.params;\n      past = queries[queryList];\n\n      if (typeof past === \"object\") {\n        atRule.each(function (rule) {\n          past.append(rule.clone());\n        });\n      } else {\n        queries[queryList] = atRule.clone();\n        queryLists.push(queryList);\n      }\n\n      atRule.remove();\n    });\n\n    sortQueryLists(queryLists, opts.sort).forEach(function (queryList) {\n      css.append(queries[queryList]);\n    });\n\n    if (sourceMap) {\n      sourceMap.moveTo(css);\n    }\n\n    return css;\n  };\n});\n\nmodule.exports.pack = function (css, opts) {\n  return postcss([\n    this(opts)\n  ]).process(css, opts);\n};\n","/home/travis/build/npmtest/node-npmtest-css-mqpacker/node_modules/css-mqpacker/bin/mqpacker.js":"#!/usr/bin/env node\n\n\"use strict\";\n\nvar mqpacker = require(\"../index\");\nvar fs = require(\"fs\");\nvar minimist = require(\"minimist\");\nvar pkg = require(\"../package.json\");\n\nvar binname = Object.keys(pkg.bin)[0];\nvar showHelp = function () {\n  console.log(\"Usage: \" + binname + \" [options] INPUT [OUTPUT]\");\n  console.log(\"\");\n  console.log(\"Description:\");\n  console.log(\"  \" + pkg.description);\n  console.log(\"\");\n  console.log(\"Options:\");\n  console.log(\"  -s, --sort       Sort `min-width` queries.\");\n  console.log(\"      --sourcemap  Create source map file.\");\n  console.log(\"  -h, --help       Show this message.\");\n  console.log(\"  -v, --version    Print version information.\");\n  console.log(\"\");\n  console.log(\"Use a single dash for INPUT to read CSS from standard input.\");\n\n  return;\n};\nvar pack = function (s, o) {\n  mqpacker.pack(s, o).then(function (result) {\n    if (!o.to) {\n      process.stdout.write(result.css);\n\n      return;\n    }\n\n    fs.writeFileSync(o.to, result.css);\n\n    if (result.map) {\n      fs.writeFileSync(o.to + \".map\", result.map);\n    }\n  }).catch(function (error) {\n    if (error.name === \"CssSyntaxError\") {\n      console.error([\n        error.file,\n        error.line,\n        error.column,\n        \" \" + error.reason\n      ].join(\":\"));\n      process.exit(1);\n    }\n\n    throw error;\n  });\n};\nvar argv = minimist(process.argv.slice(2), {\n  boolean: [\n    \"help\",\n    \"sort\",\n    \"sourcemap\",\n    \"version\"\n  ],\n  alias: {\n    \"h\": \"help\",\n    \"s\": \"sort\",\n    \"v\": \"version\"\n  },\n  default: {\n    \"help\": false,\n    \"sourcemap\": false,\n    \"sort\": false,\n    \"version\": false\n  }\n});\n\nif (argv._.length < 1) {\n  argv.help = true;\n}\n\nswitch (true) {\ncase argv.version:\n  console.log(binname + \" v\" + pkg.version);\n\n  break;\n\ncase argv.help:\n  showHelp();\n\n  break;\n\ndefault:\n  var css = \"\";\n  var options = {};\n\n  if (argv.sort) {\n    options.sort = true;\n  }\n\n  if (argv.sourcemap) {\n    options.map = true;\n  }\n\n  options.from = argv._[0];\n\n  if (argv._[1]) {\n    options.to = argv._[1];\n  }\n\n  if (options.map && options.to) {\n    options.map = {\n      inline: false\n    };\n  }\n\n  if (options.from === \"-\") {\n    delete options.from;\n    argv._[0] = process.stdin.fd;\n  }\n\n  css = fs.readFileSync(argv._[0], \"utf8\");\n  pack(css, options);\n}\n"}